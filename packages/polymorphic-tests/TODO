Current release:
  These should be tested against a summary reporter that
    takes the finished event stream and returns standard
    report data structure (proprietary format, passed to
    all summary reporters).

  ✔ Run empty suite @started(19-09-25 15:00) @done(19-09-25 16:54) @lasted(1h54m51s)
  ✔ Run suite with subsuite with empty test @started(19-09-25 17:31) @done(19-09-25 18:04) @lasted(33m13s)
    ✔ Refactor afterwards @started(19-09-25 17:25) @done(19-09-25 18:24) @lasted(59m32s)
  ✔ Run suite with async test (duration) @started(19-09-25 18:46) @done(19-09-25 18:57) @lasted(11m55s)
  ✔ Timeout @started(19-09-26 11:50) @done(19-10-03 14:35) @lasted(1w2h45m17s)
    ✔ Do planning @started(19-09-26 11:50) @done(19-09-26 12:38) @lasted(48m34s)
      ✔ Write timeout test @started(19-09-26 13:24) @done(19-09-26 14:04) @lasted(40m55s)
      ✔ Separate TestReporter to abstract with delegate stuff and abstract summary coupled to simple @started(19-09-26 14:06) @done(19-09-26 14:15) @lasted(9m20s)
      ✔ Have running test entities return observables instead of promises, have abstract summary subscribe @started(19-09-26 14:15) @done(19-09-26 15:05) @lasted(50m17s)
    ✔ Propagate global config timeout to test entity run and support in run observable @done(19-10-02 12:59)
      ✔ First chunk @started(19-09-26 15:15) @done(19-09-26 18:30) @lasted(3h15m00s)
      ✔ By global config @done(19-10-02 12:24)
      ✔ By suite overrides @done(19-10-02 12:49)
      ✔ Basic nonconfigurable timeout @started(19-10-02 10:30) @done(19-10-02 11:30) @lasted(1h49s)
      ✔ By test override @started(19-10-02 12:50) @done(19-10-02 12:59) @lasted(9m23s)
    ✘ Cancel tests on timeout @started(19-10-02 13:31) @cancelled(19-10-02 13:45) @wasted(14m2s)
    ✘ Cancelability @cancelled(19-10-03 10:48)
      ✔ First, see if other frameworks implement a better solution @done(19-10-03 10:47)
          None of them solve this, it's impossible to externally stop a given running function's execution in JS
      ✘ If not, look into static code analysis (specifically CyPress's) approach @cancelled(19-10-03 10:48)
          Couldn't even get CyPress to run
      ✘ If not, look into running test in worker, but this will have to be implemented by either @cancelled(19-10-03 11:04)
        ✘ Using importScripts to import the whole suite, and somehow run the test on the clone; @cancelled(19-10-03 11:04)
        ✘ Copying the clone over, and somehow also copying over its closure (e.g. imports in test suite file like a func under test); or, @cancelled(19-10-03 11:04)
        ✘ Using static analysis, importScripts all imports in test suite file, then copy clone over and run in correct context @cancelled(19-10-03 11:04)
    ✔ Refactor @done(19-10-03 14:35)
      ✔ Fix process hanging after run ending @started(19-10-03 14:25) @done(19-10-03 14:34) @lasted(9m13s)
  ✔ Fail parent suite when children fail @done(19-10-02 12:25)

  ✔ Skip suites and tests @done(19-10-06 16:40)
  ✔ Run only suites and tests marked with only in given suite @done(19-10-06 16:40)
  ✔ Override only with skip @done(19-10-06 16:54)

  ✔ Throw error when suite class doesn't extends TestSuite @done(19-10-06 17:05)

  Polymorphic tests:
    ☐ Run suite defined through decorator interface
    ☐ Run polymorphic tests in separate polymorphic suite instances
    ☐ Inherit tests and lifecycle hooks from abstract suite
    ☐ Add decorators for only/skip (Possibly as TestDecorator.only.skip())

  Reporters:
    Live:
      Get access to raw event stream
      TAP:
        ☐ Live reporting to stdout
        ☐ Accept TAP reporter and live report to it
      Raw:
        Parses finished event stream to standard report (JSON? YAML?)
        The base summary reporter class wraps this reporter
        ☐ Parse event stream to standard report
    Summary:
      Simple:
        ☐ Extend base summary reporter class to report based on standard summary

Next release:
  ☐ Refactor library to JS with tests in TS
  ☐ Run meta tests directly with stupid hack
  ☐ Add assertion reporting
    ☐ Run test with passing assertions
    ☐ Run test with failing assertion
    ☐ Add lifecycle hooks to suite
  ☐ Add failure modes
    ☐ Run multiple failing suites and bail after first failure
    ☐ Run multiple failing suites and stop suite after first contained failed test
    ☐ Run multiple failing suites and run all tests regardless of failure